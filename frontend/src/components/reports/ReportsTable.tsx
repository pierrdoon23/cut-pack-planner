import React from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { useTaskInfo } from '@/hooks/useTasks';
import { Loader2, FileText } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';
import pdfMake from 'pdfmake/build/pdfmake';
import pdfFonts from 'pdfmake/build/vfs_fonts';
import { TaskInfo } from '@/types/tasks';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pdfMake —Å –±–∞–∑–æ–≤—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
pdfMake.vfs = pdfFonts;

const ReportsTable: React.FC = () => {
  const { data: tasks, isLoading, error } = useTaskInfo();

  const getStatusText = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      case 'in_progress':
      case 'in-progress':
        return '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
      case 'planned':
        return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ';
      default:
        return status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const generateTaskPDF = (task: TaskInfo) => {
    try {
      const content: pdfMake.Content[] = [
        { text: `–û–¢–ß–ï–¢ –ü–û –ó–ê–î–ê–ß–ï ‚Ññ${task.task_id}`, style: 'header' },
        { text: `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${new Date().toLocaleString('ru-RU')}`, margin: [0, 0, 0, 10] },
        
        { text: '–û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø', style: 'subheader' },
        {
          text: [
            `üìã ID –∑–∞–¥–∞—á–∏: ${task.task_id}\n`,
            `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${task.user?.full_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`,
            `‚öôÔ∏è –°—Ç–∞–Ω–æ–∫: ${task.machine?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`,
            `üì¶ –£–ø–∞–∫–æ–≤–∫–∞: ${task.target_packaging?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`,
            `üé≠ –†—É–ª–æ–Ω: ${task.base_material?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`,
            `‚ö° –°—Ç–∞—Ç—É—Å: ${getStatusText(task.status)}\n`,
            `üïê –ù–∞—á–∞–ª–æ: ${task.start_time ? new Date(task.start_time).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`,
            task.end_time ? `üïê –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${new Date(task.end_time).toLocaleString('ru-RU')}\n` : ''
          ]
        },

        { text: '–î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø', style: 'subheader', margin: [0, 10, 0, 5] },
        {
          text: [
            'üì¶ –ë–∞–∑–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª:\n',
            `   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.base_material?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`,
            `   ‚Ä¢ –†–∞–∑–º–µ—Ä—ã: ${task.base_material?.length || 0} x ${task.base_material?.width || 0} –º–º\n`,
            `   ‚Ä¢ –¢–æ–ª—â–∏–Ω–∞: ${task.base_material?.thickness || 0} –º–º\n`,
            `   ‚Ä¢ –¢–∏–ø —É–ø–∞–∫–æ–≤–∫–∏: ${task.base_material?.package_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n`,
            
            'üéØ –¶–µ–ª–µ–≤–∞—è —É–ø–∞–∫–æ–≤–∫–∞:\n',
            `   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.target_packaging?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`,
            `   ‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: ${task.target_packaging?.purpose || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`,
            `   ‚Ä¢ –†–∞–∑–º–µ—Ä—ã: ${task.target_packaging?.length || 0} x ${task.target_packaging?.width || 0} –º–º\n`,
            `   ‚Ä¢ –¢–∏–ø —à–≤–∞: ${task.target_packaging?.seam_type || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`,
            `   ‚Ä¢ –î–≤–∞ –ø–æ—Ç–æ–∫–∞: ${task.target_packaging?.is_two_streams ? '–î–∞' : '–ù–µ—Ç'}\n\n`,
            
            '‚öôÔ∏è –°—Ç–∞–Ω–æ–∫:\n',
            `   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: ${task.machine?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`,
            `   ‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∑–∫–∏: ${task.machine?.cutting_speed || 0} –º–º/–º–∏–Ω\n`,
            `   ‚Ä¢ –®–∏—Ä–∏–Ω–∞ —Å—Ç–∞–Ω–∫–∞: ${task.machine?.machine_width || 0} –º–º\n\n`,
            
            'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n',
            `   ‚Ä¢ –ò–º—è: ${task.user?.full_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`,
            `   ‚Ä¢ –†–æ–ª—å: ${task.user?.role || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`
          ]
        },

        { text: '–ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò', style: 'subheader', margin: [0, 10, 0, 5] },
        {
          text: [
            `‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ${task.material_used || 0} –º\n`,
            `‚ùå –û—Ç—Ö–æ–¥—ã: ${task.waste || 0} –º\n`,
            `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π: ${task.value || 0} —à—Ç.\n`
          ]
        }
      ];

      const docDefinition = {
        content,
        defaultStyle: {
          fontSize: 10
        },
        styles: {
          header: {
            fontSize: 16,
            bold: true,
            alignment: 'center',
            margin: [0, 0, 0, 10]
          },
          subheader: {
            fontSize: 12,
            bold: true,
            margin: [0, 8, 0, 4]
          }
        }
      };

      pdfMake.createPdf(docDefinition).download(`task_${task.task_id}_report_${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center p-8">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</span>
      </div>
    );
  }

  if (error) {
    return (
      <Alert>
        <AlertDescription>
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {error.message}
        </AlertDescription>
      </Alert>
    );
  }

  return (
    <div className="rounded-md border">
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead>ID</TableHead>
            <TableHead>–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏</TableHead>
            <TableHead>–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞</TableHead>
            <TableHead>–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è</TableHead>
            <TableHead>–°—Ç–∞—Ç—É—Å</TableHead>
            <TableHead>–î–µ–π—Å—Ç–≤–∏—è</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {tasks && tasks.length > 0 ? (
            tasks.map((task) => (
              <TableRow key={task.task_id}>
                <TableCell className="font-medium">{task.task_id}</TableCell>
                <TableCell>{task.base_material?.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</TableCell>
                <TableCell>
                  {task.start_time 
                    ? new Date(task.start_time).toLocaleString('ru-RU')
                    : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                  }
                </TableCell>
                <TableCell>
                  {task.end_time 
                    ? new Date(task.end_time).toLocaleString('ru-RU')
                    : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
                  }
                </TableCell>
                <TableCell>
                  <span className={`px-2 py-1 rounded text-sm ${
                    task.status?.toLowerCase() === 'completed'
                      ? 'bg-green-100 text-green-800' 
                      : 'bg-yellow-100 text-yellow-800'
                  }`}>
                    {getStatusText(task.status)}
                  </span>
                </TableCell>
                <TableCell>
                  <Button
                    size="sm"
                    variant="outline"
                    onClick={() => generateTaskPDF(task)}
                    className="flex items-center gap-2"
                  >
                    <FileText className="h-4 w-4" />
                    PDF –æ—Ç—á–µ—Ç
                  </Button>
                </TableCell>
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={6} className="text-center py-4">
                –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  );
};

export default ReportsTable;
