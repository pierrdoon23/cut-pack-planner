import React from 'react';
import { Button } from '@/components/ui/button';
import { useTaskInfo, useDeleteTask, useUpdateTaskStatus } from '@/hooks/useTasks';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Loader2 } from 'lucide-react';
import TaskCreationForm from '@/components/TaskCreationForm';
import { TaskStatus } from '@/types/tasks';

const CuttingMaps: React.FC = () => {
  const { data: taskInfo, isLoading, error } = useTaskInfo();
  const deleteTaskMutation = useDeleteTask();
  const updateStatusMutation = useUpdateTaskStatus();

  const handleDeleteTask = async (taskId: number) => {
    try {
      await deleteTaskMutation.mutateAsync(taskId);
    } catch (error) {
      console.error('Error deleting task:', error);
    }
  };

  const handleUpdateStatus = async (taskId: number, status: TaskStatus) => {
    try {
      await updateStatusMutation.mutateAsync({ taskId, status });
    } catch (error) {
      console.error('Error updating task status:', error);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return 'bg-green-100 text-green-800';
      case 'in_progress':
      case 'in-progress':
        return 'bg-yellow-100 text-yellow-800';
      case 'planned':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      case 'in_progress':
      case 'in-progress':
        return '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
      case 'planned':
        return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ';
      default:
        return status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  if (isLoading) {
    return (
      <div className="p-6 flex items-center justify-center">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç —Ä–∞—Å–∫—Ä–æ—è...</span>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6">
        <Alert>
          <AlertDescription>
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {error.message}
          </AlertDescription>
        </Alert>
      </div>
    );
  }

  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-6">–ó–∞–¥–∞—á–∏</h1>
      
      <TaskCreationForm />

      <div className="mb-4">
        <h2 className="text-lg font-semibold">
          –í—Å–µ–≥–æ –∑–∞–¥–∞—á: {taskInfo?.length || 0}
        </h2>
      </div>

      <div className="space-y-4">
        {taskInfo && taskInfo.length > 0 ? (
          taskInfo.map((task) => (
            <div key={task.task_id} className="bg-white rounded-lg border p-4">
              <div className="grid grid-cols-1 gap-3">
                <div className="flex items-center">
                  <span className="font-semibold text-blue-600 mr-2">üìã –ó–∞–¥–∞—á–∞ ID:</span>
                  <span>{task.task_id}</span>
                </div>
                
                <div className="flex items-center">
                  <span className="font-semibold mr-2">üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</span>
                  <span>{task.user?.full_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                </div>
                
                <div className="flex items-center">
                  <span className="font-semibold mr-2">‚öôÔ∏è –°—Ç–∞–Ω–æ–∫:</span>
                  <span>{task.machine?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                </div>
                
                <div className="flex items-center">
                  <span className="font-semibold mr-2">üì¶ –£–ø–∞–∫–æ–≤–∫–∞:</span>
                  <span>{task.target_packaging?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}</span>
                </div>
                
                <div className="flex items-center">
                  <span className="font-semibold mr-2">üé≠ –†—É–ª–æ–Ω:</span>
                  <span>{task.base_material?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}</span>
                </div>
                
                <div className="flex items-center">
                  <span className="font-semibold mr-2">‚ö° –°—Ç–∞—Ç—É—Å:</span>
                  <span className={`px-2 py-1 rounded text-sm ${getStatusColor(task.status)}`}>
                    {getStatusText(task.status)}
                  </span>
                </div>
                
                <div className="flex items-center">
                  <span className="font-semibold mr-2">üïê –ù–∞—á–∞–ª–æ:</span>
                  <span>
                    {task.start_time 
                      ? new Date(task.start_time).toLocaleString('ru-RU')
                      : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
                    }
                  </span>
                </div>
                
                {task.end_time && (
                  <div className="flex items-center">
                    <span className="font-semibold mr-2">üïê –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ:</span>
                    <span>{new Date(task.end_time).toLocaleString('ru-RU')}</span>
                  </div>
                )}
                
                {task.material_used && (
                  <div className="flex items-center">
                    <span className="font-semibold mr-2">‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:</span>
                    <span>{task.material_used} –º</span>
                  </div>
                )}
                
                {task.waste && (
                  <div className="flex items-center">
                    <span className="font-semibold mr-2">‚ùå –û—Ç—Ö–æ–¥—ã:</span>
                    <span>{task.waste} –º</span>
                  </div>
                )}
                
                {task.value && (
                  <div className="flex items-center">
                    <span className="font-semibold mr-2">üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫:</span>
                    <span>{task.value} —à—Ç</span>
                  </div>
                )}
              </div>
              
              <div className="flex justify-end space-x-2 mt-4">
                <Button 
                  variant="destructive" 
                  size="sm"
                  onClick={() => handleDeleteTask(task.task_id)}
                  disabled={deleteTaskMutation.isPending}
                >
                  {deleteTaskMutation.isPending ? '–£–¥–∞–ª–µ–Ω–∏–µ...' : '–£–¥–∞–ª–∏—Ç—å'}
                </Button>
                {task.status === 'planned' && (
                  <Button 
                    variant="default" 
                    size="sm"
                    onClick={() => handleUpdateStatus(task.task_id, 'in_progress' as TaskStatus)}
                    disabled={updateStatusMutation.isPending}
                  >
                    –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
                  </Button>
                )}
                {task.status === 'in_progress' && (
                  <Button 
                    variant="default" 
                    size="sm"
                    onClick={() => handleUpdateStatus(task.task_id, 'completed' as TaskStatus)}
                    disabled={updateStatusMutation.isPending}
                    className="bg-green-500 hover:bg-green-600 text-white"
                  >
                    –ó–∞–≤–µ—Ä—à–∏—Ç—å
                  </Button>
                )}
                {task.status === 'completed' && (
                  <Button 
                    variant="default" 
                    size="sm"
                    onClick={() => handleUpdateStatus(task.task_id, 'planned' as TaskStatus)}
                    disabled={updateStatusMutation.isPending}
                  >
                    –í–µ—Ä–Ω—É—Ç—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                  </Button>
                )}
                {(task.status === 'planned' || task.status === 'in_progress') && (
                  <Button 
                    variant="destructive" 
                    size="sm"
                    onClick={() => handleUpdateStatus(task.task_id, 'cancelled' as TaskStatus)}
                    disabled={updateStatusMutation.isPending}
                  >
                    –û—Ç–º–µ–Ω–∏—Ç—å
                  </Button>
                )}
              </div>
            </div>
          ))
        ) : (
          <div className="text-center text-gray-500 py-8">
            –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
          </div>
        )}
      </div>
    </div>
  );
};

export default CuttingMaps;
