import React from 'react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useSettings } from '@/contexts/SettingsContext';
import { getTranslation } from '@/utils/translations';
import { useTaskInfo } from '@/hooks/useTasks';
import ReportsTable from '@/components/reports/ReportsTable';
import GanttChart from '@/components/reports/GanttChart';
import pdfMake from 'pdfmake/build/pdfmake';
import pdfFonts from 'pdfmake/build/vfs_fonts';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pdfMake —Å –±–∞–∑–æ–≤—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏
pdfMake.vfs = pdfFonts;

const Reports: React.FC = () => {
  const { language } = useSettings();
  const { data: tasks } = useTaskInfo();

  const getStatusText = (status: string) => {
    switch (status?.toLowerCase()) {
      case 'completed':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      case 'in_progress':
      case 'in-progress':
        return '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
      case 'planned':
        return '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ';
      default:
        return status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  };

  const generateAllTasksPDF = async () => {
    try {
      if (!tasks || tasks.length === 0) {
        alert('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞');
        return;
      }

      const content: pdfMake.Content[] = [
        { text: '–û–ë–©–ò–ô –û–¢–ß–ï–¢ –ü–û –í–°–ï–ú –ó–ê–î–ê–ß–ê–ú', style: 'header' },
        { text: `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${new Date().toLocaleString('ru-RU')}` },
        { text: `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á: ${tasks.length}`, margin: [0, 0, 0, 10] }
      ];

      tasks.forEach((task, index) => {
        content.push(
          { text: `${index + 1}. –ó–ê–î–ê–ß–ê ‚Ññ${task.task_id}`, style: 'subheader' },
          {
            text: [
              `üìã ID –∑–∞–¥–∞—á–∏: ${task.task_id}\n`,
              `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${task.user?.full_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`,
              `‚öôÔ∏è –°—Ç–∞–Ω–æ–∫: ${task.machine?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`,
              `üì¶ –£–ø–∞–∫–æ–≤–∫–∞: ${task.target_packaging?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n`,
              `üé≠ –†—É–ª–æ–Ω: ${task.base_material?.name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`,
              `‚ö° –°—Ç–∞—Ç—É—Å: ${getStatusText(task.status)}\n`,
              `üïê –ù–∞—á–∞–ª–æ: ${task.start_time ? new Date(task.start_time).toLocaleString('ru-RU') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`,
              task.end_time ? `üïê –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ: ${new Date(task.end_time).toLocaleString('ru-RU')}\n` : '',
              task.material_used ? `‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ${task.material_used} –º\n` : '',
              task.waste ? `‚ùå –û—Ç—Ö–æ–¥—ã: ${task.waste} –º\n` : '',
              task.value ? `üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–∞–∫–æ–≤–æ–∫: ${task.value} —à—Ç\n` : ''
            ]
          }
        );
      });

      const completedTasks = tasks.filter(task => task.status?.toLowerCase() === 'completed').length;
      const inProgressTasks = tasks.filter(task => task.status?.toLowerCase() === 'in_progress').length;
      const totalMaterialUsed = tasks.reduce((sum, task) => sum + (task.material_used || 0), 0);
      const totalWaste = tasks.reduce((sum, task) => sum + (task.waste || 0), 0);
      const totalProducts = tasks.reduce((sum, task) => sum + (task.value || 0), 0);
      const efficiency = totalMaterialUsed > 0
        ? ((totalMaterialUsed / (totalMaterialUsed + totalWaste)) * 100).toFixed(2)
        : '0';

      content.push({
        text: [
          '\n=== –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===\n',
          `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${completedTasks}\n`,
          `–ó–∞–¥–∞—á –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: ${inProgressTasks}\n`,
          `–û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ –º–∞—Ç–µ—Ä–∏–∞–ª–∞: ${totalMaterialUsed.toFixed(2)} –º\n`,
          `–û–±—â–∏–µ –æ—Ç—Ö–æ–¥—ã: ${totalWaste.toFixed(2)} –º\n`,
          `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π: ${totalProducts} —à—Ç.\n`,
          `–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${efficiency}%\n`
        ],
        style: 'subheader'
      });

      const docDefinition = {
        content,
        defaultStyle: {
          fontSize: 10
        },
        styles: {
          header: {
            fontSize: 16,
            bold: true,
            alignment: 'center',
            margin: [0, 0, 0, 10]
          },
          subheader: {
            fontSize: 12,
            bold: true,
            margin: [0, 8, 0, 4]
          }
        }
      };

      pdfMake.createPdf(docDefinition).download(`all_tasks_report_${new Date().toISOString().split('T')[0]}.pdf`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.');
    }
  };

  return (
    <div className="p-6 bg-white dark:bg-gray-900 text-gray-900 dark:text-white min-h-full">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">{getTranslation(language, 'reports')}</h1>
        <Button
          onClick={generateAllTasksPDF}
          className="bg-green-600 hover:bg-green-700 text-white"
        >
          {getTranslation(language, 'generatePDF')} - –í—Å–µ –∑–∞–¥–∞—á–∏
        </Button>
      </div>

      <Tabs defaultValue="table" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="table">–¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á</TabsTrigger>
          <TabsTrigger value="gantt">–î–∏–∞–≥—Ä–∞–º–º–∞ –ì–∞–Ω—Ç–∞</TabsTrigger>
        </TabsList>

        <TabsContent value="table" className="mt-6">
          <ReportsTable />
        </TabsContent>

        <TabsContent value="gantt" className="mt-6">
          <GanttChart />
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default Reports;
